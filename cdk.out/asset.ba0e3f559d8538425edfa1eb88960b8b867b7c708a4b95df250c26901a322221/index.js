"use strict";
const AWS = require("aws-sdk");
const docClient = new AWS.DynamoDB.DocumentClient();
// Function Declation to add New Todo
async function addTodo(todo) {
    const params = {
        TableName: process.env.TODOS_TABLE,
        Item: todo,
    };
    try {
        await docClient.put(params).promise();
        return todo;
    }
    catch (err) {
        console.log("DynamoDB error: ", err);
        return null;
    }
}
// Function Declation to Get all todo list
async function getTodos() {
    const params = {
        TableName: process.env.TODOS_TABLE,
    };
    try {
        const data = await docClient.scan(params).promise();
        return data.Items;
    }
    catch (err) {
        console.log("DynamoDB error: ", err);
        return null;
    }
}
// Function Declation to Delete Todo
async function deleteTodo(todoId) {
    const params = {
        TableName: process.env.TODOS_TABLE,
        Key: {
            id: todoId,
        },
    };
    try {
        await docClient.delete(params).promise();
        return todoId;
    }
    catch (err) {
        console.log("DynamoDB error: ", err);
        return null;
    }
}
async function updateTodo(todo) {
    let params = {
        TableName: process.env.TODOS_TABLE,
        Key: {
            id: todo.id,
        },
        ExpressionAttributeValues: {},
        ExpressionAttributeNames: {},
        UpdateExpression: "",
        ReturnValues: "UPDATED_NEW",
    };
    let prefix = "set ";
    let attributes = Object.keys(todo);
    for (let i = 0; i < attributes.length; i++) {
        let attribute = attributes[i];
        if (attribute !== "id") {
            params["UpdateExpression"] +=
                prefix + "#" + attribute + " = :" + attribute;
            params["ExpressionAttributeValues"][":" + attribute] = todo[attribute];
            params["ExpressionAttributeNames"]["#" + attribute] = attribute;
            prefix = ", ";
        }
    }
    try {
        await docClient.update(params).promise();
        return todo;
    }
    catch (err) {
        console.log("DynamoDB error: ", err);
        return null;
    }
}
exports.handler = async (event) => {
    switch (event.info.fieldName) {
        case "addTodo":
            return await addTodo(event.arguments.todo);
        case "getTodos":
            return await getTodos();
        case "deleteTodo":
            return await deleteTodo(event.arguments.todoId);
        case "updateTodo":
            return await updateTodo(event.arguments.todo);
        default:
            return null;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNwRCxxQ0FBcUM7QUFDckMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxJQUFVO0lBQy9CLE1BQU0sTUFBTSxHQUFHO1FBQ2IsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVztRQUNsQyxJQUFJLEVBQUUsSUFBSTtLQUNYLENBQUM7SUFDRixJQUFJO1FBQ0YsTUFBTSxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3RDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNILENBQUM7QUFFRCwwQ0FBMEM7QUFDMUMsS0FBSyxVQUFVLFFBQVE7SUFDckIsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO0tBQ25DLENBQUM7SUFDRixJQUFJO1FBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3BELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztLQUNuQjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0gsQ0FBQztBQUNELG9DQUFvQztBQUNwQyxLQUFLLFVBQVUsVUFBVSxDQUFDLE1BQWM7SUFDdEMsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO1FBQ2xDLEdBQUcsRUFBRTtZQUNILEVBQUUsRUFBRSxNQUFNO1NBQ1g7S0FDRixDQUFDO0lBQ0YsSUFBSTtRQUNGLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN6QyxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDO0FBYUQsS0FBSyxVQUFVLFVBQVUsQ0FBQyxJQUFTO0lBQ2pDLElBQUksTUFBTSxHQUFXO1FBQ25CLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVc7UUFDbEMsR0FBRyxFQUFFO1lBQ0gsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1NBQ1o7UUFDRCx5QkFBeUIsRUFBRSxFQUFFO1FBQzdCLHdCQUF3QixFQUFFLEVBQUU7UUFDNUIsZ0JBQWdCLEVBQUUsRUFBRTtRQUNwQixZQUFZLEVBQUUsYUFBYTtLQUM1QixDQUFDO0lBQ0YsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3BCLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDMUMsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLElBQUksU0FBUyxLQUFLLElBQUksRUFBRTtZQUN0QixNQUFNLENBQUMsa0JBQWtCLENBQUM7Z0JBQ3hCLE1BQU0sR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLE1BQU0sR0FBRyxTQUFTLENBQUM7WUFDaEQsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN2RSxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDO1lBQ2hFLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDZjtLQUNGO0lBRUQsSUFBSTtRQUNGLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN6QyxPQUFPLElBQUksQ0FBQztLQUNiO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDO0FBZUQsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBbUIsRUFBRSxFQUFFO0lBQzlDLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDNUIsS0FBSyxTQUFTO1lBQ1osT0FBTyxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLEtBQUssVUFBVTtZQUNiLE9BQU8sTUFBTSxRQUFRLEVBQUUsQ0FBQztRQUMxQixLQUFLLFlBQVk7WUFDZixPQUFPLE1BQU0sVUFBVSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEQsS0FBSyxZQUFZO1lBQ2YsT0FBTyxNQUFNLFVBQVUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hEO1lBQ0UsT0FBTyxJQUFJLENBQUM7S0FDZjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXUyA9IHJlcXVpcmUoXCJhd3Mtc2RrXCIpO1xuY29uc3QgZG9jQ2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuLy8gRnVuY3Rpb24gRGVjbGF0aW9uIHRvIGFkZCBOZXcgVG9kb1xuYXN5bmMgZnVuY3Rpb24gYWRkVG9kbyh0b2RvOiBUb2RvKSB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRPRE9TX1RBQkxFLFxuICAgIEl0ZW06IHRvZG8sXG4gIH07XG4gIHRyeSB7XG4gICAgYXdhaXQgZG9jQ2xpZW50LnB1dChwYXJhbXMpLnByb21pc2UoKTtcbiAgICByZXR1cm4gdG9kbztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coXCJEeW5hbW9EQiBlcnJvcjogXCIsIGVycik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLy8gRnVuY3Rpb24gRGVjbGF0aW9uIHRvIEdldCBhbGwgdG9kbyBsaXN0XG5hc3luYyBmdW5jdGlvbiBnZXRUb2RvcygpIHtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuVE9ET1NfVEFCTEUsXG4gIH07XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGRvY0NsaWVudC5zY2FuKHBhcmFtcykucHJvbWlzZSgpO1xuICAgIHJldHVybiBkYXRhLkl0ZW1zO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmxvZyhcIkR5bmFtb0RCIGVycm9yOiBcIiwgZXJyKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuLy8gRnVuY3Rpb24gRGVjbGF0aW9uIHRvIERlbGV0ZSBUb2RvXG5hc3luYyBmdW5jdGlvbiBkZWxldGVUb2RvKHRvZG9JZDogc3RyaW5nKSB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRPRE9TX1RBQkxFLFxuICAgIEtleToge1xuICAgICAgaWQ6IHRvZG9JZCxcbiAgICB9LFxuICB9O1xuICB0cnkge1xuICAgIGF3YWl0IGRvY0NsaWVudC5kZWxldGUocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgcmV0dXJuIHRvZG9JZDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coXCJEeW5hbW9EQiBlcnJvcjogXCIsIGVycik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLy8gRnVuY3Rpb24gRGVjbGF0aW9uIHRvIFVwZGF0ZSBUb2RvXG5cbnR5cGUgUGFyYW1zID0ge1xuICBUYWJsZU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgS2V5OiBzdHJpbmcgfCB7fTtcbiAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogYW55O1xuICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IGFueTtcbiAgVXBkYXRlRXhwcmVzc2lvbjogc3RyaW5nO1xuICBSZXR1cm5WYWx1ZXM6IHN0cmluZztcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVRvZG8odG9kbzogYW55KSB7XG4gIGxldCBwYXJhbXM6IFBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRPRE9TX1RBQkxFLFxuICAgIEtleToge1xuICAgICAgaWQ6IHRvZG8uaWQsXG4gICAgfSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7fSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHt9LFxuICAgIFVwZGF0ZUV4cHJlc3Npb246IFwiXCIsXG4gICAgUmV0dXJuVmFsdWVzOiBcIlVQREFURURfTkVXXCIsXG4gIH07XG4gIGxldCBwcmVmaXggPSBcInNldCBcIjtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyh0b2RvKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG4gICAgaWYgKGF0dHJpYnV0ZSAhPT0gXCJpZFwiKSB7XG4gICAgICBwYXJhbXNbXCJVcGRhdGVFeHByZXNzaW9uXCJdICs9XG4gICAgICAgIHByZWZpeCArIFwiI1wiICsgYXR0cmlidXRlICsgXCIgPSA6XCIgKyBhdHRyaWJ1dGU7XG4gICAgICBwYXJhbXNbXCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCJdW1wiOlwiICsgYXR0cmlidXRlXSA9IHRvZG9bYXR0cmlidXRlXTtcbiAgICAgIHBhcmFtc1tcIkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lc1wiXVtcIiNcIiArIGF0dHJpYnV0ZV0gPSBhdHRyaWJ1dGU7XG4gICAgICBwcmVmaXggPSBcIiwgXCI7XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBkb2NDbGllbnQudXBkYXRlKHBhcmFtcykucHJvbWlzZSgpO1xuICAgIHJldHVybiB0b2RvO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmxvZyhcIkR5bmFtb0RCIGVycm9yOiBcIiwgZXJyKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxudHlwZSBUb2RvID0ge1xuICBpZDogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBkb25lOiBib29sZWFuO1xufTtcbnR5cGUgQXBwU3luY0V2ZW50ID0ge1xuICBpbmZvOiB7XG4gICAgZmllbGROYW1lOiBzdHJpbmc7XG4gIH07XG4gIGFyZ3VtZW50czoge1xuICAgIHRvZG9JZDogc3RyaW5nO1xuICAgIHRvZG86IFRvZG87XG4gIH07XG59O1xuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBcHBTeW5jRXZlbnQpID0+IHtcbiAgc3dpdGNoIChldmVudC5pbmZvLmZpZWxkTmFtZSkge1xuICAgIGNhc2UgXCJhZGRUb2RvXCI6XG4gICAgICByZXR1cm4gYXdhaXQgYWRkVG9kbyhldmVudC5hcmd1bWVudHMudG9kbyk7XG4gICAgY2FzZSBcImdldFRvZG9zXCI6XG4gICAgICByZXR1cm4gYXdhaXQgZ2V0VG9kb3MoKTtcbiAgICBjYXNlIFwiZGVsZXRlVG9kb1wiOlxuICAgICAgcmV0dXJuIGF3YWl0IGRlbGV0ZVRvZG8oZXZlbnQuYXJndW1lbnRzLnRvZG9JZCk7XG4gICAgY2FzZSBcInVwZGF0ZVRvZG9cIjpcbiAgICAgIHJldHVybiBhd2FpdCB1cGRhdGVUb2RvKGV2ZW50LmFyZ3VtZW50cy50b2RvKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG4iXX0=